
struct DirectionalLight
{
	vec4 direction;
	vec4 color;

	ivec4 params; // ?, ?, ?, shadowMapIndex
};

struct PointLight
{
	vec4 position;
	vec4 color; 
	ivec4 params0; // falloff, ?, shadowMapIndex+X, shadowMapIndex-X
	ivec4 params1; // shadowMapIndex+Y, shadowMapIndex-Y, shadowMapIndex+Z, shadowMapIndex-Z
};

//NOTE (danielg): must match light count in LightingSystem
#define MAX_LIGHTS 64
layout(std140) uniform Lights_UBO
{
	ivec4 lightCounts; // dirLights, pointLights, ?, ?

	DirectionalLight directionalLights[MAX_LIGHTS];
	PointLight pointLights[MAX_LIGHTS];
};

layout(std140) uniform LightSpaceMatrices_UBO
{
	mat4 mLightSpace[MAX_LIGHTS];
	mat4 mLightInv[MAX_LIGHTS];
};

const int lightsPerBin = 8;
layout(std140) readonly buffer LightBins_UBO
{
	uvec4 u_binsCounts; //x,y,z, ?
	uvec4 u_lightBins[]; // start, end, pad, pad
	
};

layout(std430) readonly buffer LightBinIndices_UBO
{
	int u_lightBinIndices[]; 
};

layout(std140) uniform ShadowPages_UBO
{
	vec4 shadowMapPage[MAX_LIGHTS];
	vec4 shadowMapParams[MAX_LIGHTS]; // ?, ?, PCF Size, bias
};


uvec2 getLightBin(vec2 screenPos) 
{
	uvec2 bin = ivec2(0, 0);

	int numBinsX = int(u_binsCounts.x + 0.5);
	int numBinsY = int(u_binsCounts.y + 0.5);
	int binX = clamp(int(screenPos.x * u_binsCounts.x), 0, numBinsX - 1);
	int binY = clamp(int(screenPos.y * u_binsCounts.y), 0, numBinsY - 1);

	int binIndex = (binY * numBinsX) + binX;
	bin.x = u_lightBins[binIndex].x;
	bin.y = u_lightBins[binIndex].y;
	
	return bin;
}

// PBR ////////////////////////////////////////////////////////////////

float DistributionGGX(vec3 N, vec3 H, float roughness)
{
	float a = roughness*roughness;
	float a2     = a*a;
	float NdotH  = max(dot(N, H), 0.0);
	float NdotH2 = NdotH*NdotH;
	
	float nom    = a2;
	float denom  = (NdotH2 * (a2 - 1.0) + 1.0);
	denom        = PI * denom * denom;
	
	return nom / denom;
}

float GeometrySchlickGGX(float NdotV, float roughness)
{
	float r = (roughness + 1.0);
	float k = (r*r) / 8.0;

	float nom   = NdotV;
	float denom = NdotV * (1.0 - k) + k;

	return nom / denom;
}
  
float GeometrySmith(vec3 N, vec3 V, vec3 L, float roughness)
{
	float NdotV = max(dot(N, V), 0.0);
	float NdotL = max(dot(N, L), 0.0);
	float ggx2 = GeometrySchlickGGX(NdotV, roughness);
	float ggx1 = GeometrySchlickGGX(NdotL, roughness);

	return ggx1 * ggx2;
}

vec3 fresnelSchlick(float cosTheta, vec3 F0)
{
	return F0 + (1.0 - F0) * pow(clamp(1.0 - cosTheta, 0.0, 1.0), 5.0);
}

vec3 getLighting(vec3 L, vec3 N, vec3 V, vec3 H, vec3 F0, vec3 radiance, vec3 albedo, float roughness, float metalness)
{
	// cook-torrance brdf
	float NDF = DistributionGGX(N, H, roughness);
	float G   = GeometrySmith(N, V, L, roughness);
	vec3 F    = fresnelSchlick(max(dot(H, V), 0.0), F0);
		
	vec3 kS = F;
	vec3 kD = vec3(1.0) - kS;
	kD *= 1.0 - metalness;
		
	vec3 numerator    = NDF * G * F;
	float denominator = 4.0 * max(dot(N, V), 0.0) * max(dot(N, L), 0.0) + Epsilon;
	vec3 specular     = numerator / denominator;
			
	float NdotL = max(dot(N, L), 0.0);
	return (kD * albedo.rgb / PI + specular) * radiance * NdotL;
}

float getShadowPCF(vec3 projCoords, float NdotL, int shadowMapIndex, float bias)
{
	vec2 shadowMapSize = textureSize(u_shadowMap, 0);
	vec2 texelSize = 1.0 / shadowMapSize.xy;
	vec4 bounds = shadowMapPage[shadowMapIndex];
	
	vec4 uvBounds = vec4(0,0,0,0);
	uvBounds.xz =  bounds.xz / shadowMapSize.x;
	uvBounds.yw =  bounds.yw / shadowMapSize.y;

	// just in case zero is sent down. but PCFSize should always be >= 1
	int pcfSize = u_ignorePCF ? 1 : max(1, int(shadowMapParams[shadowMapIndex].z));
	int halfPCFSize = int(pcfSize / 2.0);

	// PCF
	float shadow = 0.0;
	for(int x = -halfPCFSize; x < -halfPCFSize + pcfSize; ++x)
	{
		for(int y = -halfPCFSize; y < -halfPCFSize + pcfSize; ++y)
		{
			vec2 texCoords = projCoords.xy + vec2(x, y) * texelSize;
			vec2 uv = mapValue(texCoords.xy, vec2(0.0 ,0.0), vec2(1.0, 1.0), uvBounds.xy, uvBounds.xy + uvBounds.zw);

			float pcfDepth = texture(u_shadowMap, uv).r; 
			shadow += (projCoords.z - bias) > pcfDepth  ? 1.0 : 0.0;
		}
	}
	
	shadow /= (pcfSize*pcfSize);
	return shadow;
}

float getDirectionalShadow(int index, vec4 posLightSpace, float NdotL)
{
	// perspective divide
	vec3 projCoords = posLightSpace.xyz / posLightSpace.w;
	projCoords = projCoords * 0.5 + 0.5;
	if(projCoords.z > 1)
	{
		return 0.0;
	}
	float bias = max(0.005 * (1.0 - NdotL), shadowMapParams[index].w);
	return getShadowPCF(projCoords, NdotL, index, bias);
}

float getPointShadow(uint pointLightIndex, vec4 fragmentPosWorldSpace, vec3 normal)
{
	 vec3 fragPosToLightPos = fragmentPosWorldSpace.xyz - pointLights[pointLightIndex].position.xyz;
	
	int shadowMapIndex;
	vec2 uv = sampleVirtualCubemap(normalize(fragPosToLightPos), shadowMapIndex);

	switch(shadowMapIndex)
	{
	case CubemapFace_XP:
		shadowMapIndex = pointLights[pointLightIndex].params0.z;
		break;
	case CubemapFace_XN:
		shadowMapIndex = pointLights[pointLightIndex].params0.w;
		break;
	case CubemapFace_YP:
		shadowMapIndex = pointLights[pointLightIndex].params1.x;
		break;
	case CubemapFace_YN:
		shadowMapIndex = pointLights[pointLightIndex].params1.y;
		break;
	case CubemapFace_ZP:
		shadowMapIndex = pointLights[pointLightIndex].params1.z;
		break;
	case CubemapFace_ZN:
		shadowMapIndex = pointLights[pointLightIndex].params1.w;
		break;
	default:
		shadowMapIndex = 0;
		break;
	}

	vec4 posLightSpace = mLightSpace[shadowMapIndex] * fragmentPosWorldSpace;

	vec3 projCoords = posLightSpace.xyz / posLightSpace.w;
	projCoords = projCoords * 0.5 + 0.5;


	float NdotL = dot(normal, normalize(fragPosToLightPos));
	float bias = max(0.0001, shadowMapParams[shadowMapIndex].w);
	return getShadowPCF(projCoords, NdotL, shadowMapIndex, bias);
}

vec3 getDirectionalLightContribution(uint lightIndex, vec3 albedo, vec3 normal, float metallic, float roughness, float depth, vec3 worldPos, vec3 view, vec3 F0)
{
	vec3 L = normalize(-directionalLights[lightIndex].direction.xyz);
	vec3 H = normalize(view + L);
	vec3 radiance = directionalLights[lightIndex].color.rgb;
	
	int shadowMapIndex = directionalLights[lightIndex].params.w;

	vec3 lighting = getLighting(L, normal, view, H, F0, radiance, albedo.rgb, roughness, metallic);
	if(directionalLights[lightIndex].params.w != -1) // if shadowmaps are enabled for this light
	{
		float NdotL = dot(normal, normalize(directionalLights[lightIndex].direction.xyz));
		float shadow = getDirectionalShadow(shadowMapIndex, mLightSpace[shadowMapIndex] * vec4(worldPos, 1.0), NdotL);
		lighting *= (1.0 - shadow);
	}

	return lighting;
}

vec3 getPointLightContribution(uint lightIndex, vec3 albedo, vec3 normal, float metallic, float roughness, float depth, vec3 worldPos, vec3 view, vec3 F0)
{
	vec3 L = normalize(pointLights[lightIndex].position.xyz - worldPos);
	vec3 H = normalize(view + L);
	float dist = length(pointLights[lightIndex].position.xyz - worldPos);

	float falloff = pointLights[lightIndex].params0.x;
	float attenuation = 1.0/(dist*dist) - 1.0/(falloff*falloff);

	vec3 radiance = clamp(pointLights[lightIndex].color.rgb * attenuation, 0, 1);

	vec3 lighting = getLighting(L, normal, view, H, F0, radiance, albedo.rgb, roughness, metallic);
	if(pointLights[lightIndex].params0.z != -1) // if shadowmaps are enabled for this light
	{
		float shadow = getPointShadow(lightIndex, vec4(worldPos, 1.0), normal);
		lighting *= (1.0 - shadow);
	}

	return lighting;
}
